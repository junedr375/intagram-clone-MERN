{"version":3,"sources":["firebase.js","Post.js","axios.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","forwardRef","ref","user","username","postId","imageUrl","caption","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","preventDefault","add","displayName","instance","axios","create","baseURL","ImageUpload","image","setImage","setUrl","progress","setProgress","setCaption","max","Input","files","Button","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","child","getDownloadURL","then","url","post","timestamp","FieldValue","serverTimestamp","getModalStyle","height","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","setUsername","email","setEmail","password","setPassword","setUser","open","setOpen","registerOpen","setRegisterOpen","onAuthStateChanged","authUser","updateProfile","fetchPosts","a","get","response","Pusher","cluster","subscribe","bind","Modal","onClose","style","signInWithEmailAndPassword","catch","alert","message","createUserWithEmailAndPassword","signOut","key","_id","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39ecd509.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyD3_zYAYz6cksr1Wg6FRUz-S5Lpb4Mc_RA\",\r\n  authDomain: \"instagram-clone-mern-25a02.firebaseapp.com\",\r\n  databaseURL: \"https://instagram-clone-mern-25a02.firebaseio.com\",\r\n  projectId: \"instagram-clone-mern-25a02\",\r\n  storageBucket: \"instagram-clone-mern-25a02.appspot.com\",\r\n  messagingSenderId: \"23688901874\",\r\n  appId: \"1:23688901874:web:bb75dc4e3c2c24410c0c6b\",\r\n  measurementId: \"G-BNCHEK4XPP\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport { db, auth, storage };\r\n","import React, { useState, useEffect, forwardRef } from \"react\";\r\nimport \"./Post.css\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { db } from \"./firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nconst Post = forwardRef(\r\n  ({ user, username, postId, imageUrl, caption }, ref) => {\r\n    const [comments, setComments] = useState([]);\r\n    const [comment, setComment] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n      let unsubscribe;\r\n      if (postId) {\r\n        unsubscribe = db\r\n          .collection(\"posts\")\r\n          .doc(postId)\r\n          .collection(\"comments\")\r\n          .onSnapshot((snapshot) => {\r\n            setComments(snapshot.docs.map((doc) => doc.data()));\r\n          });\r\n      }\r\n\r\n      return () => {\r\n        unsubscribe();\r\n      };\r\n    }, [postId]);\r\n\r\n    const postComment = (e) => {\r\n      e.preventDefault();\r\n\r\n      db.collection(\"posts\").doc(postId).collection(\"comments\").add({\r\n        text: comment,\r\n        username: user.displayName,\r\n      });\r\n      setComment(\"\");\r\n    };\r\n\r\n    return (\r\n      <div className=\"post\" ref={ref}>\r\n        <div className=\"post__header\">\r\n          <Avatar\r\n            className=\"post__avatar\"\r\n            alt={username}\r\n            src=\"/static/images/avatar/1.jpg\"\r\n          />\r\n          <h3>{username}</h3>\r\n        </div>\r\n\r\n        <img className=\"post__image\" src={imageUrl} alt=\"post\" />\r\n        <h4 className=\"post__text\">\r\n          {username} <span className=\"post__caption\">{caption}</span>\r\n        </h4>\r\n\r\n        <div className=\"post__comments\">\r\n          {comments.map((comment) => (\r\n            <p>\r\n              <b>{comment.username}</b> {comment.text}\r\n            </p>\r\n          ))}\r\n        </div>\r\n\r\n        {user && (\r\n          <form className=\"post__commentBox\">\r\n            <input\r\n              className=\"post__input\"\r\n              type=\"text\"\r\n              placeholder=\"Add a comment...\"\r\n              value={comment}\r\n              onChange={(e) => setComment(e.target.value)}\r\n            />\r\n            <button\r\n              disabled={!comment}\r\n              className=\"post__button\"\r\n              type=\"submit\"\r\n              onClick={postComment}\r\n            >\r\n              Post\r\n            </button>\r\n          </form>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Post;\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://instagram-clone-backed.herokuapp.com/',\r\n\r\n});\r\nexport default instance;","import React, { useState } from \"react\";\r\nimport firebase from \"firebase\";\r\nimport { storage, db } from \"./firebase\";\r\nimport \"./ImageUpload.css\";\r\nimport { Input, Button } from \"@material-ui/core\";\r\nimport axios from './axios.js'\r\n\r\n\r\n\r\nconst ImageUpload = ({ username }) => {\r\n  const [image, setImage] = useState(null);\r\n  const [url, setUrl] = useState(\"\");\r\n  const [progress, setProgress] = useState(0);\r\n  const [caption, setCaption] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    if (e.target.files[0]) {\r\n      setImage(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleUpload = () => {\r\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n    uploadTask.on(\r\n      \"state_changed\",\r\n      (snapshot) => {\r\n        // progress function ...\r\n        const progress = Math.round(\r\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n        );\r\n        setProgress(progress);\r\n      },\r\n      (error) => {\r\n        // Error function ...\r\n        console.log(error);\r\n      },\r\n      () => {\r\n        // complete function ...\r\n        storage\r\n          .ref(\"images\")\r\n          .child(image.name)\r\n          .getDownloadURL()\r\n          .then((url) => {\r\n            setUrl(url);\r\n\r\n            axios.post('/upload', {\r\n              caption: caption,\r\n              user: username,\r\n              image: url\r\n            });\r\n\r\n            // post image inside db\r\n            db.collection(\"posts\").add({\r\n              imageUrl: url,\r\n              caption: caption,\r\n              username: username,\r\n              timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            });\r\n\r\n            setProgress(0);\r\n            setCaption(\"\");\r\n            setImage(null);\r\n          });\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"imageupload\">\r\n      <progress className=\"imageupload__progress\" value={progress} max=\"100\" />\r\n      <Input\r\n        placeholder=\"Enter a caption\"\r\n        value={caption}\r\n        onChange={(e) => setCaption(e.target.value)}\r\n      />\r\n      <div>\r\n        <input type=\"file\" onChange={handleChange} />\r\n        <Button className=\"imageupload__button\" onClick={handleUpload}>\r\n          Upload\r\n        </Button>\r\n      </div>\r\n\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Post from \"./Post\";\r\nimport ImageUpload from \"./ImageUpload\";\r\nimport { db, auth } from \"./firebase\";\r\nimport { Button, Avatar, makeStyles, Modal, Input } from \"@material-ui/core\";\r\nimport FlipMove from \"react-flip-move\";\r\nimport InstagramEmbed from \"react-instagram-embed\";\r\nimport axios from \"./axios.js\";\r\nimport Pusher from 'pusher-js';\r\n\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    height: \"300px\",\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 400,\r\n    height: 200,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [modalStyle] = useState(getModalStyle);\r\n  const [posts, setPosts] = useState([]);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [user, setUser] = useState(null);\r\n  const [open, setOpen] = useState(false);\r\n  const [registerOpen, setRegisterOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        // user is logged in...\r\n        console.log(authUser);\r\n        setUser(authUser);\r\n\r\n        if (authUser.displayName) {\r\n          // dont update username\r\n        } else {\r\n          return authUser.updateProfile({\r\n            displayName: username,\r\n          });\r\n        }\r\n      } else {\r\n        setUser(null);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [user, username]);\r\n\r\n  const fetchPosts = async () =>\r\n    await axios.get(\"/sync\").then((response) => {\r\n      console.log(response);\r\n      setPosts(response.data);\r\n    });\r\n\r\n  useEffect(() => {\r\n    const pusher = new Pusher(\"f19a59fca1a6c9ee3e7e\", {\r\n      cluster: \"ap2\",\r\n    });\r\n\r\n    const channel = pusher.subscribe(\"posts\");\r\n    channel.bind(\"inserted\", function (data) {\r\n      console.log(\"data received\", data);\r\n      fetchPosts();\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // db.collection(\"posts\")\r\n    //   .orderBy(\"timestamp\", \"desc\")\r\n    //   .onSnapshot((snapshot) =>\r\n    //     setPosts(snapshot.docs.map((doc) => ({ id: doc.id, post: doc.data() })))\r\n    //   );\r\n\r\n    fetchPosts();\r\n  }, []);\r\n  console.log(\"posts are >>>>>>>\", posts);\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    auth\r\n      .signInWithEmailAndPassword(email, password)\r\n      .catch((error) => alert(error.message));\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleRegister = (e) => {\r\n    e.preventDefault();\r\n    auth\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .catch((error) => alert(error.message));\r\n\r\n    setRegisterOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Modal open={open} onClose={() => setOpen(false)}>\r\n        <div style={modalStyle} className={classes.paper}>\r\n          <form className=\"app__login\">\r\n            <center>\r\n              <img\r\n                className=\"app__headerImage\"\r\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\r\n                alt=\"\"\r\n              />\r\n            </center>\r\n\r\n            <Input\r\n              placeholder=\"email\"\r\n              type=\"text\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n            <Input\r\n              placeholder=\"password\"\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n            <Button onClick={handleLogin}>Login</Button>\r\n          </form>\r\n        </div>\r\n      </Modal>\r\n\r\n      <Modal open={registerOpen} onClose={() => setRegisterOpen(false)}>\r\n        <div style={modalStyle} className={classes.paper}>\r\n          <form className=\"app__login\">\r\n            <center>\r\n              <img\r\n                className=\"app__headerImage\"\r\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\r\n                alt=\"\"\r\n              />\r\n            </center>\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"username\"\r\n              value={username}\r\n              onChange={(e) => setUsername(e.target.value)}\r\n            />\r\n            <Input\r\n              placeholder=\"email\"\r\n              type=\"text\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n            <Input\r\n              placeholder=\"password\"\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n            <Button onClick={handleRegister}>Register</Button>\r\n          </form>\r\n        </div>\r\n      </Modal>\r\n      <div className=\"app__header\">\r\n        <img\r\n          className=\"app__headerImage\"\r\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\r\n          alt=\"\"\r\n        />\r\n        {user?.displayName ? (\r\n          <div className=\"app__headerRight\">\r\n            <Button onClick={() => auth.signOut()}>Logout</Button>\r\n            <Avatar\r\n              className=\"app__headerAvatar\"\r\n              alt={user.displayName}\r\n              src=\"/static/images/avatar/1.jpg\"\r\n            />\r\n          </div>\r\n        ) : (\r\n          <form className=\"app__loginHome\">\r\n            <Button onClick={() => setOpen(true)}>Login</Button>\r\n            <Button onClick={() => setRegisterOpen(true)}>Sign Up</Button>\r\n          </form>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"app__posts\">\r\n        <div className=\"app__postsLeft\">\r\n          <FlipMove>\r\n            {posts.map((post) => (\r\n              <Post\r\n                user={user}\r\n                key={post._id}\r\n                postId={post._id}\r\n                username={post.user}\r\n                caption={post.caption}\r\n                imageUrl={post.image}\r\n              />\r\n            ))}\r\n          </FlipMove>\r\n        </div>\r\n        <div className=\"app__postsRight\">\r\n          <InstagramEmbed\r\n            url=\"https://www.instagram.com/p/B_uf9dmAGPw/\"\r\n            maxWidth={320}\r\n            hideCaption={false}\r\n            containerTagName=\"div\"\r\n            protocol=\"\"\r\n            injectScript\r\n            onLoading={() => {}}\r\n            onSuccess={() => {}}\r\n            onAfterRender={() => {}}\r\n            onFailure={() => {}}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {user?.displayName ? (\r\n        <div className=\"app__upload\">\r\n          <ImageUpload username={user.displayName} />\r\n        </div>\r\n      ) : (\r\n        <center>\r\n          <h3>Login to upload</h3>\r\n        </center>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}